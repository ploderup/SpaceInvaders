/**
 * PIT DRIVER
 */
#ifndef PIT_H
#define PIT_H

#include <xbasic_types.h>
#include <xio.h>
#include "xpara"

// Macro to set the delay register based off of the base address
#define Pit_mSetPitDelayRegisterData(BaseAddress, value) \
			XIo_Out32((BaseAddress) + PIT_DELAY_REG,(value))

// Macro to set the control register based off of the base address
#define Pit_mSetPitControlRegisterData(BaseAddress, value) \
			XIo_Out32((BaseAddress) + PIT_CONTROL_REG,(value))

// Macro to get the control register value based off of the base address
#define Pit_mGetPitControlData(BaseAddress) \
            XIo_In32((BaseAddress + PIT_CONTROL_REG))

// Macro to get the delay register value based off of the base address
#define Pit_mGetPitDelayData(BaseAddress) \
            XIo_In32((BaseAddress + PIT_DELAY_REG))

#define XPAR_PIT_0_INTERRUPT_MASK 0X000002
#define XPAR_AXI_INTC_0_PIT_0_INTERRUPT_INTR 1
#define XPAR_PIT_0_BASEADDR 0x7BC00000 // Base address for the pit
#define XPAR_PIT_0_HIGHADDR 0x7BC0FFFF
#define CONTROL_INIT_VALUE  0x7 // loop, interrupt, and decrement bits set: 111
#define DELAY_INIT_VALUE	1000000 // Default value to have the game run normally

// Register
#define PIT_CONTROL_REG 0x04 // Offset to access the control register
#define PIT_DELAY_REG 0x00 // Offset to access the delay register

void pit_Init();
void pit_setDelay();
Xuint32 pit_getControlReg();
Xuint32 pit_getDelayReg();

#endif
